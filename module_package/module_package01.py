# 模块与包
# —————————————————————————————————————————————————————————————————————————————————————————————————————————————
# 模块
# 每个 python源文件 都可以作为模块来调用，调用这些源文件中的 方法

# 调用方法：
# import 模块名称 （模块名称.对象名称调用）
# from 模块名称 import 对象名称 （对象名称调用）
# import 模块名称 as 对象名称 （模块名称较长时，关联一个名称便于使用）

# 如from ... import *(最好不用*，容易污染命名空间)
# 当模块方法名相同时，后导入模块将覆盖先导入模块

# 模块在导入时，会从头到尾执行一遍 导入模块 中的所有语句
# 当脚本被独立执行时，它的 __name__ 属性会被赋值为 __main__ , 作为模块导入时，它的 __name__ 则是该源文件的名称
# 加入条件语句判断 if __name__ == "__main__": ，当独立执行时，该语句下的内容执行，当作为模块时，该语句不执行


# —————————————————————————————————————————————————————————————————————————————————————————————————————————————
# 包
# 分类 存放源代码的文件夹， 引用时 包.模块, py3.3版本前，包中需要添加__init__.py 文件
# 源文件无法调用 包含自己的包 访问 __init__ 中的全局变量， 但可以放在源文件的方法中， 作为模块来调用

# 调用模块还可以在 包中 __init__ import调用需要的模块，这样可以在 import 包时初始化调用所需的模块


# from ... import * // import ... as ...
# from ... import * 特别的，对于包而言，不定义__all__将不导入包内任何内容
# 可以在源文件或包中添加 __all__ 来限制导入内容
# 如：源文件中，__all__ = ["say_hello","x"]，即可导入 函数say_hello，属性x
# 或：__init__.py中，__all__ = ["fc1","fc2"]，即可导入 模块fc1，fc2
